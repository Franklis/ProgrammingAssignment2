library("grDevices", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("grid", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("highr", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:highr", unload=TRUE)
library("highr", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:highr", unload=TRUE)
library("htmltools", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("highr", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("installr", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("knitr", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("lattice", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("magrittr", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("markdown", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("MASS", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("Matrix", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("mgcv", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("mime", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("nnet", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("parallel", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("rmarkdown", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("rpart", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("spatial", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("splines", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("stats", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("stats4", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("stringi", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("stringr", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("survival", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("tcltk", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("tools", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("utils", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("yaml", lib.loc="C:/Program Files/R/R-3.2.2/library")
q()
install.packages(c("slidify", "ggplot2", "devtools"))
q()
q()
q()
q()
x<-rnorm(20,1)
x
a=rnorm(20,1)
a
a=1:5
a
mean(a)
summary(a)
lapply(a,median)
q()
u<- list(x=matrix(5:8,2,2),y=matrix(611,3,2))
u
q()
u<- list(x=matrix(5:8,2,2),y=matrix(6,11,3,2))
u
q()
u<- list(x=matrix(5:8,2,2),y=matrix(6:11,3,2))
u
lapply(u, function(elt) {[,1]}))
lapply(u, function(elt)
)
lapply(u, function(elt[,1]))
lapply(u, function(elt) { elt[,1]})
lapply(u, function(elt) { elt[1,]})
lapply(u, function(elt) { elt[2,]})
lapply(u, function(elt) { elt[,2]})
q()
q()
a<-read.delim(file.choose(),header=T)
summary(a)
b<-aov(Gezin~Best,data=a)
b
b<-aov(Best~Gezin,data=a)
b
fit<-aov(Best~Gezin,data=a)
fit
summary(fit)
boxplot(Best~Gezin)
boxplot(Best~Gezin,data=a)
plot.design(a)
tapply(a$Best,list(Gezin),mean)
tapply(a$Best,list(a$Gezin),mean)
tapply(a$Best,list(a$Gezin),modus)
tapply(a$Best,list(a$Gezin),median)
tapply(a$Best,list(a$Gezin),mode)
q()
oNEWAY <- read.delim("C:/Users/admin/Desktop/oNEWAY.txt")
View(oNEWAY)
oNEWAY
SUMMARY(oneway)
Summary(oneway)
Summary(oNEWAY)
a<-aov(Best~Gezin,data=oNEWAY)
Summary(a)
Summary(oNEWAY)
a<-aov(Best~Gezin,data=oNEWAY)
a
Summary(a)
Summary(oNEWAY)
Summary(a)
??summary
q()
q()
x<-list(a=1:3,b=rnorm(2))
x
lapply(x,mean)
x<-list(a=15:17,b=rnorm(2))
x
lapply(x,mean)
c<-rnorm(3,1)
c
c<-rnorm(3,2)
c
c<-rnorm(3,0)
c
a<-2:5
lapply(a,runif)
lapply(a,runif,min=12,max=20)
q()
a<-rnorm(4)
a
round(a,2)
round(a,-2)
round(a,0)
round(a,1)
round(10*a,1)
round(10*a,0)
round(10*a,-0)
round(10*a,-2)
round(10*a,-1)
q()
a<-c(4,8,12,14,15,19,17,21,22,25,26,28,29,27,26,24,32,35,39,38,45,49,41,52,58)
hist(a)
hist(a,prob=T,ylim=0.2)
hist(a,prob=T,xlim="",ylim=0.2)
hist(a,prob=T)
lines(density,a)
lines(density,(a))
lines(density(a))
hist(a,prob=T,ylim=c(0,0.2))
hist(a,prob=T,ylim=c(0,0.02))
hist(a,prob=T,ylim=c(0,0.01))
hist(a,prob=T,ylim=c(0,0.04))
lines(density(a))
q()
a<-read.delim(file.choose(),header=T)
hist(a$price,breaks=seq(from=0,to=1200000,by=200000))
hist(a$price,breaks=seq(from=0,to=1500000,by=300000))
hist(a$price,ylim=c(0,80,breaks=seq(from=0,to=1500000,by=300000))
xlim=""
hist(a$price,ylim=c(0,80),breaks=seq(from=0,to=1500000,by=300000))
box()
hist(a$price,ylim=c(0,80),breaks=7
)
b<-read.delim(file.choose(),header=T)
c<-aov(Best~Gezin,data=b)
summary(c)
boxplot(b$Best~b$Gezin)
q()
a<-1:17 ## interval van 1 t/m 17
a
a<-1:17  interval van 1 t/m 17
x<-5/2
x
x<-5/2L
x
x<-(5/2)L
x<-c(5/2)L
x<-7/2L
x
x<-7/4L
x
a<-5
a
a<-5L
a
a<-5L/2
a
a<-5.3L/2
a<-5,3L/2
a<-5/3
a
a<-5L/3
a
q()
x <- c(4, "a", TRUE)
X
SUMMARY(X)
x
x <- c(1,3, 5); y <- c(3, 2, 10) rbind(x, y)
rbind(x, y)
x <- c(1,3, 5); y <- c(3, 2, 10)
rbind(x, y)
?character
x <- list(2, "a", "b", TRUE)
x
x <- 1:4; y <- 2:3
x+y
n<-2:9.8
nL
n<-2:9.8L
n<-2.7:9L
n
n<-3.1:9L
n
q()
x<-c(2,FALSE)
x
x<-c(TRUE,FALSE)
x
x<-1:4
class(x)
x<-c(1,4,9)
class(x)
x<-4L
class(x)
x<-c(2,"p",FALSE)
class(x)
x<-seq(0,12,1)
class(x)
x
x<-list("m",1:4,FALSE)
x
class(x)
q()
x[x==4]>10
x<-c(17,14,4,6,13,12,10)
x[x==4]>10
x[x==10]<-4
x
x[x<10]<-4
x
x<-c(17,14,4,6,13,12,10)
x[x<10]<-4
x
x<-c(17,14,4,6,13,12,10)
x[x==10]<-4
x
x[x==11]<-4
x
q()
x<-c(17,14,4,6,13,12,10)
x[x == 11]<-4
x
[x == 11]<-4
x == 11<-4
install.packages("subsettings")
x<-c(17,14,4,6,13,12,10)
x[x == 11]<- 4
x[x]
x[x == 4]>- 10
x[x]
x[x == 4]> 10
x[x == 10]<- 4
x[x]
x[x == 10]
x[x < 10]<- 4
x[x]
x[x == 4]> 4
x[x == 4]> 10
x[x >= 11]>- 4
x[x]
x[x >= 11]> 4
x[x]
x[x >= 10]> 4
x[x]
x[x > 10]> 4
x[x]
is.[x]
as.[x]
as[x]
as.x
q()
read.csv(file.choose(),header=T)
read.table(file.choose(),header=T,sep=",")
read.table(file.choose(),header=T,sep=",",quote = quote(5))
read.csv(file.choose(),header=T,sep=",")
read.delim(file.choose(),header=T)
summary(exc)
summary(solar)
summary(Solar)
summary(Ozone)
summary(ozone)
q()
x<- c(17,14,4,6,13,12,10)
x[x == 4]>10
as.nummiric(x)
as.numeric(x)
as.numeric([x])
as.numeric[x]
as.numericx[x]
as.numeric(x[x])
x[x >= 11]>- 4
as.numeric(x[x])
as.numeric(x)
x[1]
x<- c(17,14,4,6,13,12,15)
x[x >= 11]>- 4
x<- c(7,4,4,6,13,12,15)
x[x >= 11]>- 4
read.csv(file.choose(),header=T,sep=",")
a<-read.csv(file.choose(),header=T,sep=",")
summary(a)
a<-read.csv(file.choose(),header=T,sep=",")
q()
x<- c(7,4,4,6,13,12,15)
a<-x[x >= 11]>- 4
a
as.numeric(a)
as.numeric(x)
as.numeric(x[x])
(x[x])
x[x]
m<-matrix(2,3)
m
m<-matrix(nrow=2,ncol=3)
m
m<1:12
m<-1:12
a<-dim(m)=c(2,6)
dim(m)<-c(2,6)
m
x<-1:5
y<-3:9
cbind(x,y)
x<-factor(c("yes","yes","yes","no","yes","no"))
x
table(x)
x
x<-factor(c("yes","yes","yes","no","yes","no"))
levels=c("yes","no")
x
x<-factor(c("yes","yes","yes","no","yes","no"))
levels=c("yes","no")
x
x<-factor(c("yes","yes","yes","no","yes","no")
levels=c("yes","no"))
x<-factor(c("yes","yes","yes","no","yes","no"),levels=c("yes","no")
)
x
q()
install.packages("dplyr")
q()
install.packages("dplyr")
library(dplyr)
utils:::menuInstallPkgs()
search()
chooseCRANmirror()
utils:::menuInstallPkgs()
search()
library(stringr)
search()
library(dplyr)
pollutantmean <- function(directory, pollutant, id = 1:332) {
  # Break this function up into a series of smaller functions
  # that do exactly what you expect them to. Your friends
  # will love you for it.
  csvFiles = getFilesById(id, directory)
  dataFrames = readMultipleCsvFiles(csvFiles)
  dataFrame = bindMultipleDataFrames(dataFrames)
  getColumnMean(dataFrame, column = pollutant)
}
getFilesById <- function(id, directory = getwd()) {
  allFiles = list.files(directory)
  file.path(directory, allFiles[id])
}
readMultipleCsvFiles <- function(csvFiles) {
  lapply(csvFiles, read.csv)
}
bindMultipleDataFrames <- function(dataFrames) {
  Reduce(function(x, y) rbind(x, y), dataFrames)
}
getColumnMean <- function(dataFrame, column, ignoreNA = TRUE) {
  mean(dataFrame[ , column], na.rm = ignoreNA)
}
pollutantmean("specdata", "niterate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332) {
  # Break this function up into a series of smaller functions
  # that do exactly what you expect them to. Your friends
  # will love you for it.
  csvFiles = getFilesById(id, directory)
  dataFrames = readMultipleCsvFiles(csvFiles)
  dataFrame = bindMultipleDataFrames(dataFrames)
  getColumnMean(dataFrame, column = pollutant)
}
getFilesById <- function(id, directory = getwd()) {
  allFiles = list.files(directory)
  file.path(directory, allFiles[id])
}
readMultipleCsvFiles <- function(csvFiles) {
  lapply(csvFiles, read.csv)
}
bindMultipleDataFrames <- function(dataFrames) {
  Reduce(function(x, y) rbind(x, y), dataFrames)
}
getColumnMean <- function(dataFrame, column, ignoreNA = TRUE) {
  mean(dataFrame[ , column], na.rm = ignoreNA)
}
pollutantmean("specdata", "nitrate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
source("pollutantmean.R")
source(specdat/"pollutantmean.R")
source("specdata"/"pollutantmean.R")
source(specdata/pollutantmean.R)
dir()
source("pollutantmean.R")
source(rprog_data_specdata/"pollutantmean.R")
source("rprog_data_specdata"/"pollutantmean.R")
source(rprog_data_specdata/pollutantmean.R)
source("rprog_data_specdata"/pollutantmean.R)
source("pollutantmean.R")
dir()
q()
q()
makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
        x <<- y
        inv <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
    inv <- x$getinverse()
    if(!is.null(inv)) {
        message("getting cached data.")
        return(inv)
    }
    data <- x$get()
    inv <- solve(data)
    x$setinverse(inv)
    inv
}
makeCacheMatrix(cbind(c(5,3,-1), c(-14,10,3),c(11,7,-6)))
x<- c(3,1)
y<- c(4,2)
rbind(x,y)
makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
        x <<- y
        inv <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
    inv <- x$getinverse()
    if(!is.null(inv)) {
        message("getting cached data.")
        return(inv)
    }
    data <- x$get()
    inv <- solve(data)
    x$setinverse(inv)
    inv
}
x = rbind(c(3,1),c(4,2))
m = makeCacheMatrix(x)
 m$get()
cacheSolve(m)
m$get();cacheSolve(m)
makeCacheMatrix <- function(p = matrix()) {
    inv <- NULL
    set <- function(q) {
        p <<- q
        inv <<- NULL
    }
    get <- function() p
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# This function assumes that the matrix is always invertible.
cacheSolve <- function(p, ...) {
    inv <- p$getinverse()
    if(!is.null(inv)) {
        message("getting cached data.")
        return(inv)
    }
    data <- p$get()
    inv <- solve(data)
    p$setinverse(inv)
    inv
}
p = rbind(c(3,1),c(4,2))
z = makeCacheMatrix(p)
z$get()
cacheSolve(z)
q()
getwd()
dir()
source("cachematrix.R")
source("cachematrix.R")
p<- rbind(c(1,3),c(4,2))
z<- makeCacheMatrix(p)
z$get()
cacheSolve(z)
source("cachematrix.R")
p<- rbind(c(1,3),c(4,2))
z<- makeCacheMatrix(p)
z$get()
cacheSolve(z)
q()
